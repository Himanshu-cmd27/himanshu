private void saveStudent() {
    String name = nameField.getText().trim();
    String email = emailField.getText().trim();
    String ageText = ageField.getText().trim();

    // ✅ Check for empty fields
    if (name.isEmpty() || email.isEmpty() || ageText.isEmpty()) {
        JOptionPane.showMessageDialog(this,
                "All fields are required.",
                "Input Error",
                JOptionPane.ERROR_MESSAGE);
        return;
    }

    // ✅ Validate email format using regex
    if (!email.matches("^[\\w.-]+@[\\w.-]+\\.\\w{2,}$")) {
        JOptionPane.showMessageDialog(this,
                "Invalid email format. Please enter a valid email address.",
                "Input Error",
                JOptionPane.ERROR_MESSAGE);
        return;
    }

    // ✅ Validate age is a number and within reasonable range
    int age;
    try {
        age = Integer.parseInt(ageText);
        if (age <= 0 || age > 150) {
            JOptionPane.showMessageDialog(this,
                    "Age must be between 1 and 150.",
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this,
                "Age must be a numeric value.",
                "Input Error",
                JOptionPane.ERROR_MESSAGE);
        return;
    }

    // ✅ Pass validated data to DAO
    Student student = new Student(name, email, age);
    boolean result = studentDAO.insertStudent(student);

    if (result) {
        JOptionPane.showMessageDialog(this,
                "Student saved successfully!",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
        nameField.setText("");
        emailField.setText("");
        ageField.setText("");
    } else {
        JOptionPane.showMessageDialog(this,
                "Could not save student. Email may already exist.",
                "Database Error",
                JOptionPane.ERROR_MESSAGE);
    }
}
